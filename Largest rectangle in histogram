
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

	public static void largestRect(int[] a, int n)
    {
       Stack<Integer> st = new Stack<Integer>(); // stack holds indices of bars.
       int i = 0;
       int area = 0; // this holds area of rectangle formed by taking bar at top of stack.
       int maxArea = 0;
       int lIndex = 0;
       int rIndex = 0;
       ArrayList<Integer> list = new ArrayList<>(); 
       while(i<n)
       {
           if(st.empty() || a[i] >= a[st.peek()])
             {  
                st.push(i);  //bars in stack are always being stored in non-decreasing order.
                i++;
             } 
           else
            {
               rIndex = i; //right index of bar on top of stack is equal to 'i', which is nothing but index of its next bar.
               
               /*calculate area of rectangle corresponding to the bar on top of stack. So Pop the top bar from stack. After
                 popping if stack is empty then it means that a[i] is the smallest bar among all those which have been scanned 
                 uptil now from left to right. So multiply popped bar with number of bars encountered uptil now. Otherwise
                 if stack is not empty then left index is top of stack*/
               
               int top = st.pop();
               if(st.empty())
                  {
                     lIndex = 0;
                     area = a[top] * (rIndex - lIndex); 
                  }
               else
                  {
                     lIndex = st.peek();
                     area = a[top] * (rIndex - lIndex -1);
                  }
            } 
           if(area > maxArea)
                maxArea = area;
                
       }
       /*Remaing bars in stack are in non-decreasing order*/
       rIndex = i;
       while(st.empty()==false)
       {
           int top = st.pop();
           if(st.empty())
                  {
                     lIndex = 0;
                     area = a[top] * (rIndex - lIndex);
                  }
               else
                  {
                     lIndex = st.peek();
                     area = a[top] * (rIndex - lIndex -1);
                  }
           if(area > maxArea)  
              maxArea = area;
       } 
       System.out.println(maxArea);
    } 
 
 public static void main(String[] args) {
     /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
     Scanner sc = new Scanner(System.in);
     int n = sc.nextInt();
     int[] a = new int[n];
     for(int i=0;i<n;i++)
    	 a[i] = sc.nextInt();
     largestRect(a, a.length);
 }
}
